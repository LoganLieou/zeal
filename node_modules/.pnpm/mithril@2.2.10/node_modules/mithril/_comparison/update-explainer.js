import * as fs from "node:fs/promises"
import * as path from "node:path"

import LZString from "lz-string"

import {dirname} from "./parse.js"
import {gzipSync} from "node:zlib"

const [bundle, explainer] = await Promise.all([
	fs.readFile(path.resolve(dirname, "../dist/mithril.umd.js")),
	fs.readFile(path.resolve(dirname, "../_explainer.md"), "utf-8")
])

/** @type {Array<{match: RegExp, replace(...groups: string[]) => string}>} */
const replacements = [
	{
		// Long enough that I'm not going to accidentally hit a wrong link.
		match: /(If you just want to mess around in a code playground, \[here's a link for you\]\(https:\/\/flems\.io\/#0=)[^)]+/,
		replace(prefix) {
			const demoSource = `
function App() {
  return "Hello, world!"
}

m.mount(document.body, () => m(App))
`.trimStart()

			const hash = LZString.compressToEncodedURIComponent(JSON.stringify({
				selected: ".js",
				files: [
					{name: ".html", content: ""},
					{name: "mithril.umd.js", content: bundle.toString("utf-8")},
					{name: ".js", content: demoSource},
					{name: ".css", content: ""},
				]
			}))
			return prefix + hash
		},
	},
	{
		// Long enough that I'm not going to accidentally hit a wrong link.
		match: /(\*\*Highlights:\*\*.*?- 9\.12 KB to )[\d.]+/,
		replace(prev) {
			return prev + (gzipSync(bundle).length / 1024).toFixed(2)
		},
	},
]

await fs.writeFile(
	path.resolve(dirname, "../_explainer.md"),
	replacements.reduce((e, r) => e.replace(r.match, (_, ...groups) => r.replace(...groups)), explainer)
)
